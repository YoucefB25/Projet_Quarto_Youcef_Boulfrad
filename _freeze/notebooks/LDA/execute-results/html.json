{
  "hash": "36e90a65b2cf4301c6c732c7c5a17719",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Analyse Discriminante Linéaire (LDA) - Multiclasse\"\n---\n\n\n\n\n\n\n## Théorie\n\nL'**Analyse Discriminante Linéaire (LDA)** est une technique de classification qui cherche à trouver une combinaison linéaire de caractéristiques maximisant la séparation entre plusieurs classes.\n\nContrairement à d'autres modèles initialement conçus pour des problèmes binaires et adaptés aux cas multiclasse via OVA ou OVO, **LDA est intrinsèquement multiclasse**. Il attribue directement une observation à l’une des classes disponibles en estimant des distributions normales multivariées et en utilisant la règle de Bayes.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **Régularisation (`shrinkage`)** : contrôle la variance de la covariance estimée et est sélectionnée en fonction de la précision sur l'ensemble de validation.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur hyperparamètre.\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur `shrinkage` et évaluation\n\n::: {#546827b5 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('../data/covertype_train.csv')\nval_data = pd.read_csv('../data/covertype_val.csv')\ntest_data = pd.read_csv('../data/covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1), train_data['Cover_Type']\nX_val, y_val = val_data.drop('Cover_Type', axis=1), val_data['Cover_Type']\nX_test, y_test = test_data.drop('Cover_Type', axis=1), test_data['Cover_Type']\n\n# 🔢 Normalisation des données\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# 🎯 Recherche du meilleur hyperparamètre shrinkage\nshrinkage_values = np.linspace(0, 1, 10)\nval_accuracies = []\n\nfor shrinkage in shrinkage_values:\n    lda = LinearDiscriminantAnalysis(solver='lsqr', shrinkage=shrinkage)\n    lda.fit(X_train, y_train)\n    acc = accuracy_score(y_val, lda.predict(X_val))\n    val_accuracies.append((shrinkage, acc))\n\n# Sélection du meilleur hyperparamètre\nbest_shrinkage, best_val_acc = max(val_accuracies, key=lambda x: x[1])\n\n# 📈 Affichage du graphique\nplt.figure(figsize=(8, 6))\nplt.plot(shrinkage_values, [acc for shrinkage, acc in val_accuracies], marker='o', linestyle='dashed', label=\"Validation\")\nplt.xlabel(\"Shrinkage\")\nplt.ylabel(\"Précision sur validation\")\nplt.title(\"Impact du shrinkage sur la performance de LDA\")\nplt.legend()\nplt.show()\n\n# 🏆 Modèle final avec le meilleur hyperparamètre\nfinal_model = LinearDiscriminantAnalysis(solver='lsqr', shrinkage=best_shrinkage)\nfinal_model.fit(X_train, y_train)\ny_test_pred = final_model.predict(X_test)\n\n# 📊 Matrice de confusion\nconf_matrix = confusion_matrix(y_test, y_test_pred)\n\n# 📈 Calcul des taux de bien classés par classe\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\noverall_test_accuracy = accuracy_score(y_test, y_test_pred)\n\n# 📝 Affichage des résultats\nprint(f\"\\n🔹 Meilleur hyperparamètre shrinkage sur l'échantillon de validation : {best_shrinkage:.2f}\")\nprint(f\"Taux de bien classés sur l'échantillon de validation avec cet hyperparamètre : {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre :\")\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\n\nprint(f\"\\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : {overall_test_accuracy:.2%}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](LDA_files/figure-html/cell-2-output-1.png){width=672 height=523}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n🔹 Meilleur hyperparamètre shrinkage sur l'échantillon de validation : 0.00\nTaux de bien classés sur l'échantillon de validation avec cet hyperparamètre : 63.37%\n\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\n[[1344  520    1    0   27    2  225]\n [ 548 1865   48   17  218  124   13]\n [   0   29  902  130   32  337    0]\n [   0    0   44   53    0   13    0]\n [   2  160   27    0  179   12    0]\n [   0   53  210   25   42  364    0]\n [ 154    0    3    0    0    0  664]]\n\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre :\nClasse 1 : 63.43%\nClasse 2 : 65.83%\nClasse 3 : 63.08%\nClasse 4 : 48.18%\nClasse 5 : 47.11%\nClasse 6 : 52.45%\nClasse 7 : 80.88%\n\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : 64.04%\n```\n:::\n:::\n\n\n",
    "supporting": [
      "LDA_files"
    ],
    "filters": [],
    "includes": {}
  }
}