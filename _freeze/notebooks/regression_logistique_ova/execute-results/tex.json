{
  "hash": "42b60696d67ffc6c878e753cb20b922f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Régression Logistique Binomiale - One-Versus-All (OVA)\"\n---\n\n\n\n\n\n\n## Théorie\n\nLa **régression logistique binomiale** est utilisée pour la classification binaire, mais elle peut être adaptée aux problèmes **multiclasse** via l'approche **One-Versus-All (OVA)**. Ici, un modèle est entraîné pour chaque classe contre toutes les autres combinées.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **Paramètre de régularisation (`C`)** : qui contrôle la complexité du modèle et est sélectionné en fonction de la précision sur l'ensemble de validation.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur hyperparamètre.\n\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur `C` et évaluation\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('../data/covertype_train.csv')\nval_data = pd.read_csv('../data/covertype_val.csv')\ntest_data = pd.read_csv('../data/covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1), train_data['Cover_Type']\nX_val, y_val = val_data.drop('Cover_Type', axis=1), val_data['Cover_Type']\nX_test, y_test = test_data.drop('Cover_Type', axis=1), test_data['Cover_Type']\n\n# 🔢 Normalisation des données\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# 🎯 Recherche du meilleur hyperparamètre C\nC_values = np.arange(0.1, 1.1, 0.1)\nval_accuracies = []\n\nfor C in C_values:\n    model = OneVsRestClassifier(LogisticRegression(solver='saga', C=C, penalty='l2', max_iter=500))\n    model.fit(X_train, y_train)\n    acc = accuracy_score(y_val, model.predict(X_val))\n    val_accuracies.append((C, acc))\n\n# Sélection du meilleur hyperparamètre\nbest_C, best_val_acc = max(val_accuracies, key=lambda x: x[1])\n\n\n# 📈 Affichage du graphique\nplt.figure(figsize=(8, 6))\nplt.plot(C_values, [acc for C, acc in val_accuracies], marker='o', linestyle='dashed', label=\"Validation\")\nplt.xlabel(\"Paramètre de régularisation (C)\")\nplt.ylabel(\"Précision sur validation\")\nplt.title(\"Impact de la régularisation sur la performance de la régression logistique (OVA)\")\nplt.legend()\nplt.show()\n\n# 🏆 Modèle final avec le meilleur hyperparamètre\nfinal_model = OneVsRestClassifier(LogisticRegression(solver='saga', C=best_C, penalty='l2', max_iter=500))\nfinal_model.fit(X_train, y_train)\ny_test_pred = final_model.predict(X_test)\n\n# 📊 Matrice de confusion\nconf_matrix = confusion_matrix(y_test, y_test_pred)\n\n# 📈 Calcul des taux de bien classés par classe\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\noverall_test_accuracy = accuracy_score(y_test, y_test_pred)\n\n# 📝 Affichage des résultats\nprint(f\"\\n🔹 Meilleur hyperparamètre C sur l'échantillon de validation : {best_C:.2f}\")\nprint(f\"Taux de bien classés sur l'échantillon de validation avec cet hyperparamètre : {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre  :\")\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\n\nprint(f\"\\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : {overall_test_accuracy:.2%}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](regression_logistique_ova_files/figure-pdf/cell-2-output-1.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n🔹 Meilleur hyperparamètre C sur l'échantillon de validation : 0.80\nTaux de bien classés sur l'échantillon de validation avec cet hyperparamètre : 67.71%\n\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\n[[1337  610    1    0    5    1  165]\n [ 495 2150  107    1   21   51    8]\n [   0   65 1270   20    8   67    0]\n [   0    0   70   29    0   11    0]\n [   2  273   27    0   63   15    0]\n [   0   92  386    3   21  192    0]\n [ 143    7    3    0    0    0  668]]\n\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre  :\nClasse 1 : 63.10%\nClasse 2 : 75.89%\nClasse 3 : 88.81%\nClasse 4 : 26.36%\nClasse 5 : 16.58%\nClasse 6 : 27.67%\nClasse 7 : 81.36%\n\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : 68.07%\n```\n:::\n:::\n\n\n",
    "supporting": [
      "regression_logistique_ova_files/figure-pdf"
    ],
    "filters": []
  }
}