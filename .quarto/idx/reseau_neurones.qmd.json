{"title":"Réseau de Neurones (MLP) avec sortie Softmax","markdown":{"yaml":{"title":"Réseau de Neurones (MLP) avec sortie Softmax"},"headingText":"Théorie","containsRefs":false,"markdown":"\n\n\nUn réseau de neurones multi-couches (**MLP - Multi-Layer Perceptron**) est un modèle d'apprentissage supervisé basé sur des couches de neurones artificiels. Il est particulièrement efficace pour la classification non linéaire.\n\nDans notre cas, nous utilisons **une couche de sortie Softmax**, qui permet de normaliser les sorties du réseau en probabilités pour une classification multiclasses.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **Nombre d'époques (`epochs`)** : sélectionné en fonction de la précision sur l'ensemble de validation.\n\nNous utilisons également :\n- **Optimiseur Adam** avec un taux d’apprentissage adaptatif.\n- **Taille du batch (`batch_size`)** fixé à 32.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur nombre d'époques.\n\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur nombre d'époques et évaluation\n\n```{python}\nimport os\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom torch.utils.data import TensorDataset, DataLoader\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔌 Utilisation du CPU uniquement (désactivation GPU)\ndevice = torch.device(\"cpu\")\ntorch.backends.cudnn.enabled = False\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('covertype_train.csv')\nval_data = pd.read_csv('covertype_val.csv')\ntest_data = pd.read_csv('covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1).values, train_data['Cover_Type'].values - 1\nX_val, y_val = val_data.drop('Cover_Type', axis=1).values, val_data['Cover_Type'].values - 1\nX_test, y_test = test_data.drop('Cover_Type', axis=1).values, test_data['Cover_Type'].values - 1\n\n# 🔢 Normalisation des données\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# 📦 Conversion en tenseurs PyTorch\nX_train_torch = torch.tensor(X_train, dtype=torch.float32, device=device)\ny_train_torch = torch.tensor(y_train, dtype=torch.long, device=device)\nX_val_torch = torch.tensor(X_val, dtype=torch.float32, device=device)\ny_val_torch = torch.tensor(y_val, dtype=torch.long, device=device)\nX_test_torch = torch.tensor(X_test, dtype=torch.float32, device=device)\ny_test_torch = torch.tensor(y_test, dtype=torch.long, device=device)\n\n# 📚 Création des DataLoaders\nbatch_size = 32\ntrain_loader = DataLoader(TensorDataset(X_train_torch, y_train_torch), batch_size=batch_size, shuffle=True)\nval_loader = DataLoader(TensorDataset(X_val_torch, y_val_torch), batch_size=batch_size, shuffle=False)\ntest_loader = DataLoader(TensorDataset(X_test_torch, y_test_torch), batch_size=batch_size, shuffle=False)\n\n# 🏗 Définition du modèle PyTorch (MLP)\nclass MLP(nn.Module):\n    def __init__(self, input_dim, num_classes):\n        super(MLP, self).__init__()\n        self.fc1 = nn.Linear(input_dim, 128)\n        self.relu1 = nn.ReLU()\n        self.fc2 = nn.Linear(128, 64)\n        self.relu2 = nn.ReLU()\n        self.fc3 = nn.Linear(64, num_classes)\n\n    def forward(self, x):\n        x = self.relu1(self.fc1(x))\n        x = self.relu2(self.fc2(x))\n        return self.fc3(x)  # Pas de softmax ici (inclus dans CrossEntropyLoss)\n\n# 🎯 Initialisation du modèle\nnum_features, num_classes = X_train.shape[1], len(set(y_train))\nmodel = MLP(num_features, num_classes).to(device)\n\n# 🚀 Optimiseur et fonction de perte\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters())\n\n# 📈 Entraînement du modèle avec sélection du meilleur nombre d'époques\nnum_epochs = 100\ntrain_acc_list, val_acc_list = [], []\nbest_val_acc, best_epoch = 0, 0\n\nfor epoch in range(num_epochs):\n    # 🔄 Mode entraînement\n    model.train()\n    correct_train, total_train = 0, 0\n\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        outputs = model(X_batch)\n        loss = criterion(outputs, y_batch)\n        loss.backward()\n        optimizer.step()\n\n        # 🎯 Calcul de l'accuracy sur l'entraînement\n        _, predicted = torch.max(outputs, 1)\n        correct_train += (predicted == y_batch).sum().item()\n        total_train += y_batch.size(0)\n\n    train_acc_list.append(correct_train / total_train)\n\n    # 🔄 Mode validation\n    model.eval()\n    correct_val, total_val = 0, 0\n\n    with torch.no_grad():\n        for X_batch, y_batch in val_loader:\n            outputs = model(X_batch)\n            _, predicted = torch.max(outputs, 1)\n            correct_val += (predicted == y_batch).sum().item()\n            total_val += y_batch.size(0)\n\n    val_accuracy = correct_val / total_val\n    val_acc_list.append(val_accuracy)\n\n    # 🎯 Sauvegarde de la meilleure époque\n    if val_accuracy > best_val_acc:\n        best_val_acc, best_epoch = val_accuracy, epoch + 1\n\n# 📉 Affichage des courbes d'entraînement\nplt.figure(figsize=(8, 6))\nplt.plot(range(1, num_epochs + 1), train_acc_list, label='Train Accuracy')\nplt.plot(range(1, num_epochs + 1), val_acc_list, label='Validation Accuracy')\nplt.axvline(best_epoch, color='r', linestyle='--', label=f'Best Epoch: {best_epoch}')\nplt.xlabel(\"Époques\")\nplt.ylabel(\"Taux de bonnes prédictions\")\nplt.title(\"Optimisation du modèle de réseau de neurones (PyTorch)\")\nplt.legend()\nplt.show()\n\n# 🔄 Ré-entraîner le modèle avec le meilleur nombre d'époques\nmodel.train()\nfor epoch in range(best_epoch):\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        outputs = model(X_batch)\n        loss = criterion(outputs, y_batch)\n        loss.backward()\n        optimizer.step()\n\n# 🎯 Évaluation sur l'ensemble de test\nmodel.eval()\ncorrect_test, total_test = 0, 0\ny_test_pred_classes = []\n\nwith torch.no_grad():\n    for X_batch, y_batch in test_loader:\n        outputs = model(X_batch)\n        _, predicted = torch.max(outputs, 1)\n        y_test_pred_classes.extend(predicted.cpu().numpy())\n        correct_test += (predicted == y_batch).sum().item()\n        total_test += y_batch.size(0)\n\ntest_accuracy = correct_test / total_test\n\n# 📌 Affichage de la matrice de confusion et des métriques finales\nconf_matrix = confusion_matrix(y_test, y_test_pred_classes)\nprint(f\"\\n🔹 Meilleure époque : {best_epoch} avec une précision de validation de {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe :\")\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\nprint(f\"\\nTaux de bien classés total : {test_accuracy:.2%}\")\n```","srcMarkdownNoYaml":"\n\n## Théorie\n\nUn réseau de neurones multi-couches (**MLP - Multi-Layer Perceptron**) est un modèle d'apprentissage supervisé basé sur des couches de neurones artificiels. Il est particulièrement efficace pour la classification non linéaire.\n\nDans notre cas, nous utilisons **une couche de sortie Softmax**, qui permet de normaliser les sorties du réseau en probabilités pour une classification multiclasses.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **Nombre d'époques (`epochs`)** : sélectionné en fonction de la précision sur l'ensemble de validation.\n\nNous utilisons également :\n- **Optimiseur Adam** avec un taux d’apprentissage adaptatif.\n- **Taille du batch (`batch_size`)** fixé à 32.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur nombre d'époques.\n\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur nombre d'époques et évaluation\n\n```{python}\nimport os\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom torch.utils.data import TensorDataset, DataLoader\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔌 Utilisation du CPU uniquement (désactivation GPU)\ndevice = torch.device(\"cpu\")\ntorch.backends.cudnn.enabled = False\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('covertype_train.csv')\nval_data = pd.read_csv('covertype_val.csv')\ntest_data = pd.read_csv('covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1).values, train_data['Cover_Type'].values - 1\nX_val, y_val = val_data.drop('Cover_Type', axis=1).values, val_data['Cover_Type'].values - 1\nX_test, y_test = test_data.drop('Cover_Type', axis=1).values, test_data['Cover_Type'].values - 1\n\n# 🔢 Normalisation des données\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# 📦 Conversion en tenseurs PyTorch\nX_train_torch = torch.tensor(X_train, dtype=torch.float32, device=device)\ny_train_torch = torch.tensor(y_train, dtype=torch.long, device=device)\nX_val_torch = torch.tensor(X_val, dtype=torch.float32, device=device)\ny_val_torch = torch.tensor(y_val, dtype=torch.long, device=device)\nX_test_torch = torch.tensor(X_test, dtype=torch.float32, device=device)\ny_test_torch = torch.tensor(y_test, dtype=torch.long, device=device)\n\n# 📚 Création des DataLoaders\nbatch_size = 32\ntrain_loader = DataLoader(TensorDataset(X_train_torch, y_train_torch), batch_size=batch_size, shuffle=True)\nval_loader = DataLoader(TensorDataset(X_val_torch, y_val_torch), batch_size=batch_size, shuffle=False)\ntest_loader = DataLoader(TensorDataset(X_test_torch, y_test_torch), batch_size=batch_size, shuffle=False)\n\n# 🏗 Définition du modèle PyTorch (MLP)\nclass MLP(nn.Module):\n    def __init__(self, input_dim, num_classes):\n        super(MLP, self).__init__()\n        self.fc1 = nn.Linear(input_dim, 128)\n        self.relu1 = nn.ReLU()\n        self.fc2 = nn.Linear(128, 64)\n        self.relu2 = nn.ReLU()\n        self.fc3 = nn.Linear(64, num_classes)\n\n    def forward(self, x):\n        x = self.relu1(self.fc1(x))\n        x = self.relu2(self.fc2(x))\n        return self.fc3(x)  # Pas de softmax ici (inclus dans CrossEntropyLoss)\n\n# 🎯 Initialisation du modèle\nnum_features, num_classes = X_train.shape[1], len(set(y_train))\nmodel = MLP(num_features, num_classes).to(device)\n\n# 🚀 Optimiseur et fonction de perte\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters())\n\n# 📈 Entraînement du modèle avec sélection du meilleur nombre d'époques\nnum_epochs = 100\ntrain_acc_list, val_acc_list = [], []\nbest_val_acc, best_epoch = 0, 0\n\nfor epoch in range(num_epochs):\n    # 🔄 Mode entraînement\n    model.train()\n    correct_train, total_train = 0, 0\n\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        outputs = model(X_batch)\n        loss = criterion(outputs, y_batch)\n        loss.backward()\n        optimizer.step()\n\n        # 🎯 Calcul de l'accuracy sur l'entraînement\n        _, predicted = torch.max(outputs, 1)\n        correct_train += (predicted == y_batch).sum().item()\n        total_train += y_batch.size(0)\n\n    train_acc_list.append(correct_train / total_train)\n\n    # 🔄 Mode validation\n    model.eval()\n    correct_val, total_val = 0, 0\n\n    with torch.no_grad():\n        for X_batch, y_batch in val_loader:\n            outputs = model(X_batch)\n            _, predicted = torch.max(outputs, 1)\n            correct_val += (predicted == y_batch).sum().item()\n            total_val += y_batch.size(0)\n\n    val_accuracy = correct_val / total_val\n    val_acc_list.append(val_accuracy)\n\n    # 🎯 Sauvegarde de la meilleure époque\n    if val_accuracy > best_val_acc:\n        best_val_acc, best_epoch = val_accuracy, epoch + 1\n\n# 📉 Affichage des courbes d'entraînement\nplt.figure(figsize=(8, 6))\nplt.plot(range(1, num_epochs + 1), train_acc_list, label='Train Accuracy')\nplt.plot(range(1, num_epochs + 1), val_acc_list, label='Validation Accuracy')\nplt.axvline(best_epoch, color='r', linestyle='--', label=f'Best Epoch: {best_epoch}')\nplt.xlabel(\"Époques\")\nplt.ylabel(\"Taux de bonnes prédictions\")\nplt.title(\"Optimisation du modèle de réseau de neurones (PyTorch)\")\nplt.legend()\nplt.show()\n\n# 🔄 Ré-entraîner le modèle avec le meilleur nombre d'époques\nmodel.train()\nfor epoch in range(best_epoch):\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        outputs = model(X_batch)\n        loss = criterion(outputs, y_batch)\n        loss.backward()\n        optimizer.step()\n\n# 🎯 Évaluation sur l'ensemble de test\nmodel.eval()\ncorrect_test, total_test = 0, 0\ny_test_pred_classes = []\n\nwith torch.no_grad():\n    for X_batch, y_batch in test_loader:\n        outputs = model(X_batch)\n        _, predicted = torch.max(outputs, 1)\n        y_test_pred_classes.extend(predicted.cpu().numpy())\n        correct_test += (predicted == y_batch).sum().item()\n        total_test += y_batch.size(0)\n\ntest_accuracy = correct_test / total_test\n\n# 📌 Affichage de la matrice de confusion et des métriques finales\nconf_matrix = confusion_matrix(y_test, y_test_pred_classes)\nprint(f\"\\n🔹 Meilleure époque : {best_epoch} avec une précision de validation de {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe :\")\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\nprint(f\"\\nTaux de bien classés total : {test_accuracy:.2%}\")\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"output-file":"reseau_neurones.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.40","theme":"cosmo","title":"Réseau de Neurones (MLP) avec sortie Softmax"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","number-sections":false,"highlight-style":"pygments","include-in-header":{"text":"\\usepackage{fvextra}\n\\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines=true,breakanywhere=true,commandchars=\\\\\\{\\}}\n"},"output-file":"reseau_neurones.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"title":"Réseau de Neurones (MLP) avec sortie Softmax"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}