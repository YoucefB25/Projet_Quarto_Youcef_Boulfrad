{
  "hash": "4bc4f89d0e69b0fc3356f15554adb5e7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Téléchargement et Préparation du Dataset Covertype\"\nformat: html\n---\n\n\n\n\n# Téléchargement de la base de données Covertype\n\nLa base de données **Covertype** provient de l'[UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/datasets/Covertype).\n\nVous pouvez la télécharger directement via le lien ci-dessous :\n\n- [Télécharger le dataset Covertype (CSV)](https://archive.ics.uci.edu/ml/machine-learning-databases/covtype/covtype.data.gz)\n\n\n## Chargement et Réduction des Données\n\n::: {#d8f63c83 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Téléchargement direct des données depuis l'URL\nurl = \"https://archive.ics.uci.edu/ml/machine-learning-databases/covtype/covtype.data.gz\"\ncolumn_names = [f'Feature_{i}' for i in range(1, 55)] + ['Cover_Type']\ndata = pd.read_csv(url, header=None, names=column_names)\n\n# Réduction simple à 10% des données sans rééquilibrage des classes\nsample_size = int(0.1 * len(data))  # 10% de la base d'origine\ndata_sampled = data.sample(n=sample_size, random_state=42).reset_index(drop=True)\n\n# Affichage des effectifs par classe avant la division\nprint(\"Effectifs par classe dans l'échantillon réduit :\")\nprint(data_sampled['Cover_Type'].value_counts().sort_index())\n\n# Division des données en ensembles d'entraînement, de validation et de test\ntrain_data, temp_data = train_test_split(data_sampled, test_size=0.4, random_state=42, stratify=data_sampled['Cover_Type'])\nval_data, test_data = train_test_split(temp_data, test_size=0.5, random_state=42, stratify=temp_data['Cover_Type'])\n\n# Affichage des tailles des ensembles\nprint(f\"\\nTaille des ensembles :\")\nprint(f\"  - Entraînement : {len(train_data)} lignes\")\nprint(f\"  - Validation : {len(val_data)} lignes\")\nprint(f\"  - Test : {len(test_data)} lignes\")\n\n# Affichage des effectifs par classe dans chaque ensemble\nprint(\"\\nEffectifs par classe dans l'ensemble d'entraînement :\")\nprint(train_data['Cover_Type'].value_counts().sort_index())\n\nprint(\"\\nEffectifs par classe dans l'ensemble de validation :\")\nprint(val_data['Cover_Type'].value_counts().sort_index())\n\nprint(\"\\nEffectifs par classe dans l'ensemble de test :\")\nprint(test_data['Cover_Type'].value_counts().sort_index())\n\n# Sauvegarder les ensembles en fichiers CSV\ntrain_data.to_csv('covertype_train.csv', index=False)\nval_data.to_csv('covertype_val.csv', index=False)\ntest_data.to_csv('covertype_test.csv', index=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEffectifs par classe dans l'échantillon réduit :\nCover_Type\n1    21297\n2    28248\n3     3607\n4      259\n5      932\n6     1706\n7     2052\nName: count, dtype: int64\n\nTaille des ensembles :\n  - Entraînement : 34860 lignes\n  - Validation : 11620 lignes\n  - Test : 11621 lignes\n\nEffectifs par classe dans l'ensemble d'entraînement :\nCover_Type\n1    12778\n2    16949\n3     2164\n4      155\n5      559\n6     1024\n7     1231\nName: count, dtype: int64\n\nEffectifs par classe dans l'ensemble de validation :\nCover_Type\n1    4259\n2    5649\n3     721\n4      52\n5     187\n6     341\n7     411\nName: count, dtype: int64\n\nEffectifs par classe dans l'ensemble de test :\nCover_Type\n1    4260\n2    5650\n3     722\n4      52\n5     186\n6     341\n7     410\nName: count, dtype: int64\n```\n:::\n:::\n\n\n## Liens pour télécharger les ensembles préparés\n\n- [Télécharger l'ensemble d'entraînement](covertype_train.csv)\n- [Télécharger l'ensemble de validation](covertype_val.csv)\n- [Télécharger l'ensemble de test](covertype_test.csv)\n```\n\n",
    "supporting": [
      "preparation_donnees_covertype_files"
    ],
    "filters": [],
    "includes": {}
  }
}