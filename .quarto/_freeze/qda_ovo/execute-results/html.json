{
  "hash": "b45275a48bffdf690da0641816890395",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Analyse Discriminante Quadratique (QDA) - One-Versus-One (OVO)\"\n---\n\n\n## Th√©orie\nL'**Analyse Discriminante Quadratique (QDA)** est une technique de classification qui, contrairement √† LDA, permet aux classes d'avoir des **matrices de covariance diff√©rentes**. Cela le rend plus flexible mais peut aussi augmenter le risque de sur-apprentissage.\n\nL'approche **One-Versus-One (OVO)** consiste √† entra√Æner un mod√®le pour chaque paire de classes, ce qui est utile lorsque les classes sont bien s√©par√©es.\n\n## Hyperparam√®tres\nNous allons tester les hyperparam√®tres suivants :\n- **R√©gularisation (`reg_param`)** : contr√¥le la variance de la covariance estim√©e (valeurs entre `0` et `1`).\n- **Standardisation des donn√©es** : normalisation des features avant l'entra√Ænement.\n\n## Exemple en Python\n\n::: {#973ad055 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.multiclass import OneVsOneClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nimport os\nimport warnings\n\n# üîá D√©sactiver les avertissements de scikit-learn et Python\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\n\n# Chargement des ensembles de donn√©es\ntrain_data = pd.read_csv('covertype_train.csv')\nval_data = pd.read_csv('covertype_val.csv')\ntest_data = pd.read_csv('covertype_test.csv')\n\n# Pr√©paration des donn√©es\nX_train = train_data.drop('Cover_Type', axis=1)\ny_train = train_data['Cover_Type']\n\nX_val = val_data.drop('Cover_Type', axis=1)\ny_val = val_data['Cover_Type']\n\nX_test = test_data.drop('Cover_Type', axis=1)\ny_test = test_data['Cover_Type']\n\n# Standardisation des donn√©es\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_val = scaler.transform(X_val)\nX_test = scaler.transform(X_test)\n\n# Recherche des meilleurs hyperparam√®tres\nreg_params = np.linspace(0, 1, 10)\ntrain_accuracies = []\nval_accuracies = []\n\nfor reg_param in reg_params:\n    qda_ovo = OneVsOneClassifier(QuadraticDiscriminantAnalysis(reg_param=reg_param))\n    qda_ovo.fit(X_train, y_train)\n    \n    y_train_pred = qda_ovo.predict(X_train)\n    y_val_pred = qda_ovo.predict(X_val)\n    \n    train_accuracies.append(accuracy_score(y_train, y_train_pred))\n    val_accuracies.append(accuracy_score(y_val, y_val_pred))\n\n# S√©lection du meilleur reg_param\nbest_reg_param = reg_params[val_accuracies.index(max(val_accuracies))]\nprint(f\"Meilleur reg_param QDA (OVO): {best_reg_param}\")\n\n# Affichage du graphique\nplt.figure(figsize=(8, 6))\nplt.plot(reg_params, train_accuracies, marker='o', linestyle='dashed', label='Train Accuracy')\nplt.plot(reg_params, val_accuracies, marker='s', linestyle='dashed', label='Validation Accuracy')\nplt.xlabel(\"R√©gularisation (reg_param)\")\nplt.ylabel(\"Pr√©cision\")\nplt.title(\"Impact de la r√©gularisation sur la performance de QDA (OVO)\")\nplt.legend()\nplt.show()\n\n# Mod√®le final avec le meilleur reg_param\nqda_ovo = OneVsOneClassifier(QuadraticDiscriminantAnalysis(reg_param=best_reg_param))\nqda_ovo.fit(X_train, y_train)\ny_test_pred = qda_ovo.predict(X_test)\n\n# Affichage de la matrice de confusion\nconf_matrix = confusion_matrix(y_test, y_test_pred)\nprint(\"\\nMatrice de confusion (OVO) :\")\nprint(conf_matrix)\n\nprint(\"\\n√âvaluation sur l'ensemble de test\")\nprint(classification_report(y_test, y_test_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMeilleur reg_param QDA (OVO): 0.8888888888888888\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](qda_ovo_files/figure-html/cell-2-output-2.png){width=672 height=525}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nMatrice de confusion (OVO) :\n[[1163  626    1    1   89   14  225]\n [ 650 1561   51   27  402  125   17]\n [   0    7  948  136   50  289    0]\n [   0    0   45   53    0   12    0]\n [  28  103   27   19  191   12    0]\n [  11   34  230   53   31  335    0]\n [ 103   35    3    0   16    0  664]]\n\n√âvaluation sur l'ensemble de test\n              precision    recall  f1-score   support\n\n           1       0.59      0.55      0.57      2119\n           2       0.66      0.55      0.60      2833\n           3       0.73      0.66      0.69      1430\n           4       0.18      0.48      0.27       110\n           5       0.25      0.50      0.33       380\n           6       0.43      0.48      0.45       694\n           7       0.73      0.81      0.77       821\n\n    accuracy                           0.59      8387\n   macro avg       0.51      0.58      0.53      8387\nweighted avg       0.62      0.59      0.60      8387\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "qda_ovo_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}