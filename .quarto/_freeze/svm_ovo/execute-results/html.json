{
  "hash": "34816fa31bb011c7183b6e7369e2c32c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Support Vector Machines (SVM) - One-Versus-One (OVO)\"\n---\n\n\n\n\n\n\n## Théorie\n\nLes **machines à vecteurs de support (SVM)** sont des modèles de classification supervisés qui cherchent à maximiser la marge de séparation entre les classes. Pour un problème **multiclasse**, l'approche **One-Versus-One (OVO)** entraîne un SVM pour chaque paire de classes, ce qui permet une meilleure séparation lorsque les classes sont bien distinctes.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **Paramètre de régularisation (`C`)** : contrôle la pénalisation des erreurs de classification et est sélectionné en fonction de la précision sur l'ensemble de validation.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur hyperparamètre.\n\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur `C` et évaluation\n\n::: {#d92eb558 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\nfrom sklearn.multiclass import OneVsOneClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('covertype_train.csv')\nval_data = pd.read_csv('covertype_val.csv')\ntest_data = pd.read_csv('covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1), train_data['Cover_Type']\nX_val, y_val = val_data.drop('Cover_Type', axis=1), val_data['Cover_Type']\nX_test, y_test = test_data.drop('Cover_Type', axis=1), test_data['Cover_Type']\n\n# 🔢 Normalisation des données\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# 🎯 Recherche du meilleur hyperparamètre C\nC_values = np.arange(0.1, 1.1, 0.1)\nval_accuracies = []\n\nfor C in C_values:\n    model = OneVsOneClassifier(SVC(kernel='rbf', C=C))\n    model.fit(X_train, y_train)\n    acc = accuracy_score(y_val, model.predict(X_val))\n    val_accuracies.append((C, acc))\n\n# Sélection du meilleur hyperparamètre\nbest_C, best_val_acc = max(val_accuracies, key=lambda x: x[1])\n\n\n# 📈 Affichage du graphique\nplt.figure(figsize=(8, 6))\nplt.plot(C_values, [acc for C, acc in val_accuracies], marker='o', linestyle='dashed', label=\"Validation\")\nplt.xlabel(\"Paramètre de régularisation (C)\")\nplt.ylabel(\"Précision sur validation\")\nplt.title(\"Impact de la régularisation sur la performance du SVM (OVO)\")\nplt.legend()\nplt.show()\n\n# 🏆 Modèle final avec le meilleur hyperparamètre\nfinal_model = OneVsOneClassifier(SVC(kernel='rbf', C=best_C))\nfinal_model.fit(X_train, y_train)\ny_test_pred = final_model.predict(X_test)\n\n# 📊 Matrice de confusion\nconf_matrix = confusion_matrix(y_test, y_test_pred)\n\n# 📈 Calcul des taux de bien classés par classe\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\noverall_test_accuracy = accuracy_score(y_test, y_test_pred)\n\n# 📝 Affichage des résultats\nprint(f\"\\n🔹 Meilleur hyperparamètre C sur l'échantillon de validation : {best_C:.2f}\")\nprint(f\"Taux de bien classés sur l'échantillon de validation avec cet hyperparamètre : {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre  :\")\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\n\nprint(f\"\\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : {overall_test_accuracy:.2%}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](svm_ovo_files/figure-html/cell-2-output-1.png){width=672 height=525}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n🔹 Meilleur hyperparamètre C sur l'échantillon de validation : 1.00\nTaux de bien classés sur l'échantillon de validation avec cet hyperparamètre : 72.54%\n\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\n[[1495  519    1    0    5    5   94]\n [ 433 2227   85    1   36   47    4]\n [   0   53 1292   18    4   63    0]\n [   0    0   79   24    0    7    0]\n [   1  212   25    0  131   11    0]\n [   0   45  377    3    1  268    0]\n [ 144    8    0    0    0    0  669]]\n\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre  :\nClasse 1 : 70.55%\nClasse 2 : 78.61%\nClasse 3 : 90.35%\nClasse 4 : 21.82%\nClasse 5 : 34.47%\nClasse 6 : 38.62%\nClasse 7 : 81.49%\n\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : 72.80%\n```\n:::\n:::\n\n\n",
    "supporting": [
      "svm_ovo_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}