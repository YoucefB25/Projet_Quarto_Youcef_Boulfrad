{
  "hash": "046bcd183ee6e1125e5a6e1424ef2b57",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"KNN - K-Nearest Neighbors\"\n---\n\n\n\n\n\n\n## Théorie\n\nLe **K-Nearest Neighbors (KNN)** est un algorithme de classification basé sur la proximité des données dans un espace multidimensionnel. Il attribue une classe à un point en fonction des **K voisins les plus proches**.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **Nombre de voisins (`k`)** : déterminé en fonction de la précision sur l'ensemble de validation.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur hyperparamètre.\n\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur `k` et évaluation\n\n::: {#672b5402 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('../data/covertype_train.csv')\nval_data = pd.read_csv('../data/covertype_val.csv')\ntest_data = pd.read_csv('../data/covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1), train_data['Cover_Type']\nX_val, y_val = val_data.drop('Cover_Type', axis=1), val_data['Cover_Type']\nX_test, y_test = test_data.drop('Cover_Type', axis=1), test_data['Cover_Type']\n\n# 🔢 Normalisation des données\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# 🎯 Recherche du meilleur hyperparamètre k\nk_values = range(1, 51, 2)\nval_accuracies = []\n\nfor k in k_values:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X_train, y_train)\n    acc = accuracy_score(y_val, knn.predict(X_val))\n    val_accuracies.append((k, acc))\n\n# Sélection du meilleur hyperparamètre\nbest_k, best_val_acc = max(val_accuracies, key=lambda x: x[1])\n\n\n# 📈 Affichage du graphique\nplt.figure(figsize=(8, 6))\nplt.plot(k_values, [acc for k, acc in val_accuracies], marker='o', linestyle='dashed', label=\"Validation\")\nplt.xlabel(\"Nombre de voisins (k)\")\nplt.ylabel(\"Précision sur validation\")\nplt.title(\"Impact du nombre de voisins sur la performance de KNN\")\nplt.legend()\nplt.show()\n\n# 🏆 Modèle final avec le meilleur hyperparamètre\nfinal_model = KNeighborsClassifier(n_neighbors=best_k)\nfinal_model.fit(X_train, y_train)\ny_test_pred = final_model.predict(X_test)\n\n# 📊 Matrice de confusion\nconf_matrix = confusion_matrix(y_test, y_test_pred)\n\n# 📈 Calcul des taux de bien classés par classe\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\noverall_test_accuracy = accuracy_score(y_test, y_test_pred)\n\n# 📝 Affichage des résultats\nprint(f\"\\n🔹 Meilleur nombre de voisins (k) sur l'échantillon de validation : {best_k}\")\nprint(f\"Taux de bien classés sur l'échantillon de validation avec cet hyperparamètre : {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre  :\")\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\n\nprint(f\"\\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : {overall_test_accuracy:.2%}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](KNN_files/figure-html/cell-2-output-1.png){width=672 height=523}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n🔹 Meilleur nombre de voisins (k) sur l'échantillon de validation : 1\nTaux de bien classés sur l'échantillon de validation avec cet hyperparamètre : 81.40%\n\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\n[[1663  352    1    0   14    5   84]\n [ 370 2288   37    0   80   49    9]\n [   1   29 1235   20    4  141    0]\n [   0    3   29   70    0    8    0]\n [  13   53   10    0  296    8    0]\n [   3   31  142   11    0  507    0]\n [  40   10    0    0    1    0  770]]\n\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre  :\nClasse 1 : 78.48%\nClasse 2 : 80.76%\nClasse 3 : 86.36%\nClasse 4 : 63.64%\nClasse 5 : 77.89%\nClasse 6 : 73.05%\nClasse 7 : 93.79%\n\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : 81.42%\n```\n:::\n:::\n\n\n",
    "supporting": [
      "KNN_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}