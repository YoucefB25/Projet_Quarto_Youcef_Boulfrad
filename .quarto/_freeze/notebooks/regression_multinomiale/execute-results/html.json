{
  "hash": "6eb9b9f22d0b3d78f13c0f99dfb1fce3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"R√©gression Multinomiale (Softmax Regression)\"\n---\n\n\n\n\n\n\n## Th√©orie\n\nLa **r√©gression multinomiale**, aussi appel√©e **r√©gression logistique multinomiale**, est une extension de la r√©gression logistique qui permet de g√©rer plusieurs classes. Elle utilise une fonction **Softmax** en sortie pour assigner une probabilit√© √† chaque classe.\n\n## Hyperparam√®tre utilis√©\n\nNous allons optimiser :\n\n- **Param√®tre de r√©gularisation (`C`)** : contr√¥le la p√©nalisation de la complexit√© du mod√®le et est s√©lectionn√© en fonction de la pr√©cision sur l'ensemble de validation.\n\n## M√©triques d‚Äô√©valuation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'√©chantillon de test.\n\n- **Taux de bien class√©s sur l'√©chantillon de validation** avec le meilleur hyperparam√®tre.\n\n- **Taux de bien class√©s sur l'√©chantillon de test** avec ce m√™me hyperparam√®tre.\n\n- **Taux de bien class√©s par classe sur l'√©chantillon de test** pour observer la pr√©cision sur chaque classe.\n\n## Recherche du meilleur `C` et √©valuation\n\n::: {#a96c0e58 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\n\n# üîá Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# üîÑ Chargement des ensembles de donn√©es\ntrain_data = pd.read_csv('../data/covertype_train.csv')\nval_data = pd.read_csv('../data/covertype_val.csv')\ntest_data = pd.read_csv('../data/covertype_test.csv')\n\n# üìä Pr√©paration des donn√©es\nX_train, y_train = train_data.drop('Cover_Type', axis=1), train_data['Cover_Type']\nX_val, y_val = val_data.drop('Cover_Type', axis=1), val_data['Cover_Type']\nX_test, y_test = test_data.drop('Cover_Type', axis=1), test_data['Cover_Type']\n\n# üî¢ Normalisation des donn√©es\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# üéØ Recherche du meilleur hyperparam√®tre C\nC_values = np.arange(0.1, 1.1, 0.1)\nval_accuracies = []\n\nfor C in C_values:\n    model = LogisticRegression(multi_class='multinomial', solver='saga', C=C, penalty='l2', max_iter=500)\n    model.fit(X_train, y_train)\n    acc = accuracy_score(y_val, model.predict(X_val))\n    val_accuracies.append((C, acc))\n\n# S√©lection du meilleur hyperparam√®tre\nbest_C, best_val_acc = max(val_accuracies, key=lambda x: x[1])\n\n\n# üìà Affichage du graphique\nplt.figure(figsize=(8, 6))\nplt.plot(C_values, [acc for C, acc in val_accuracies], marker='o', linestyle='dashed', label=\"Validation\")\nplt.xlabel(\"Param√®tre de r√©gularisation (C)\")\nplt.ylabel(\"Pr√©cision sur validation\")\nplt.title(\"Impact de la r√©gularisation sur la performance de la r√©gression multinomiale\")\nplt.legend()\nplt.show()\n\n# üèÜ Mod√®le final avec le meilleur hyperparam√®tre\nfinal_model = LogisticRegression(multi_class='multinomial', solver='saga', C=best_C, penalty='l2', max_iter=500)\nfinal_model.fit(X_train, y_train)\ny_test_pred = final_model.predict(X_test)\n\n# üìä Matrice de confusion\nconf_matrix = confusion_matrix(y_test, y_test_pred)\n\n# üìà Calcul des taux de bien class√©s par classe\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\noverall_test_accuracy = accuracy_score(y_test, y_test_pred)\n\n# üìù Affichage des r√©sultats\nprint(f\"\\nüîπ Meilleur hyperparam√®tre C sur l'√©chantillon de validation : {best_C:.2f}\")\nprint(f\"Taux de bien class√©s sur l'√©chantillon de validation avec cet hyperparam√®tre : {best_val_acc:.2%}\")\nprint(\"\\nüìä Matrice de confusion sur l'√©chantillon de test, avec le meilleur hyperparam√®tre :\")\nprint(conf_matrix)\n\nprint(\"\\nüìà Taux de bien class√©s par classe sur l'√©chantillon de test, avec le meilleur hyperparam√®tre  :\")\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\n\nprint(f\"\\nüîπ Taux de bien class√©s sur l'√©chantillon de test avec le meilleur hyperparam√®tre : {overall_test_accuracy:.2%}\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](regression_multinomiale_files/figure-html/cell-2-output-2.png){width=698 height=525}\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:1247: FutureWarning: 'multi_class' was deprecated in version 1.5 and will be removed in 1.7. From then on, it will always use 'multinomial'. Leave it to its default value to avoid this warning.\n  warnings.warn(\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nüîπ Meilleur hyperparam√®tre C sur l'√©chantillon de validation : 0.10\nTaux de bien class√©s sur l'√©chantillon de validation avec cet hyperparam√®tre : 69.14%\n\nüìä Matrice de confusion sur l'√©chantillon de test, avec le meilleur hyperparam√®tre :\n[[1416  583    1    0    6    1  112]\n [ 511 2142   87    1   40   44    8]\n [   0   48 1249   38    8   87    0]\n [   0    0   61   34    0   15    0]\n [   2  257   24    0   92    5    0]\n [   0   64  374    3    8  245    0]\n [ 163    1    3    0    0    0  654]]\n\nüìà Taux de bien class√©s par classe sur l'√©chantillon de test, avec le meilleur hyperparam√®tre  :\nClasse 1 : 66.82%\nClasse 2 : 75.61%\nClasse 3 : 87.34%\nClasse 4 : 30.91%\nClasse 5 : 24.21%\nClasse 6 : 35.30%\nClasse 7 : 79.66%\n\nüîπ Taux de bien class√©s sur l'√©chantillon de test avec le meilleur hyperparam√®tre : 69.54%\n```\n:::\n:::\n\n\n",
    "supporting": [
      "regression_multinomiale_files"
    ],
    "filters": [],
    "includes": {}
  }
}