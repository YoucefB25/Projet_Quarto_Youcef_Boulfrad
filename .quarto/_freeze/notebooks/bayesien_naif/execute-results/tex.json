{
  "hash": "06d7b1923fa69ee110e53fefa4a24d2b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Classifieur Bayésien Naïf\"\n---\n\n\n\n\n\n\n## Théorie\n\nLe classificateur **Bayésien Naïf** repose sur le **théorème de Bayes** et l'hypothèse d'indépendance conditionnelle entre les variables explicatives. Il est particulièrement efficace pour les problèmes de classification textuelle et fonctionne bien même avec peu de données d'entraînement.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **`var_smoothing`** : Ce paramètre permet d'ajouter un lissage aux variances estimées pour éviter les divisions par zéro. Il est sélectionné en fonction de la précision sur l'ensemble de validation.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur hyperparamètre.\n\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur `var_smoothing` et évaluation\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nimport warnings\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('../data/covertype_train.csv')\nval_data = pd.read_csv('../data/covertype_val.csv')\ntest_data = pd.read_csv('../data/covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1), train_data['Cover_Type']\nX_val, y_val = val_data.drop('Cover_Type', axis=1), val_data['Cover_Type']\nX_test, y_test = test_data.drop('Cover_Type', axis=1), test_data['Cover_Type']\n\n# 🎯 Recherche du meilleur hyperparamètre var_smoothing\nvar_smoothing_values = np.logspace(-9, 0, 10)\nval_accuracies = []\n\nfor smoothing in var_smoothing_values:\n    gnb = GaussianNB(var_smoothing=smoothing)\n    gnb.fit(X_train, y_train)\n    acc = accuracy_score(y_val, gnb.predict(X_val))\n    val_accuracies.append((smoothing, acc))\n\n# Sélection du meilleur hyperparamètre\nbest_smoothing, best_val_acc = max(val_accuracies, key=lambda x: x[1])\n\n\n# 📈 Affichage du graphique\nplt.figure(figsize=(8, 6))\nplt.plot(var_smoothing_values, [acc for smoothing, acc in val_accuracies], marker='o', linestyle='dashed', label=\"Validation\")\nplt.xscale('log')\nplt.xlabel(\"Valeur de var_smoothing\")\nplt.ylabel(\"Précision sur validation\")\nplt.title(\"Optimisation du paramètre var_smoothing pour GaussianNB\")\nplt.legend()\nplt.show()\n\n# 🏆 Modèle final avec le meilleur hyperparamètre\nfinal_model = GaussianNB(var_smoothing=best_smoothing)\nfinal_model.fit(X_train, y_train)\ny_test_pred = final_model.predict(X_test)\n\n# 📊 Matrice de confusion\nconf_matrix = confusion_matrix(y_test, y_test_pred)\n\n# 📈 Calcul des taux de bien classés par classe\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\noverall_test_accuracy = accuracy_score(y_test, y_test_pred)\n\n# 📝 Affichage des résultats\nprint(f\"\\n🔹 Meilleur var_smoothing sur l'échantillon de validation : {best_smoothing:.1e}\")\nprint(f\"Taux de bien classés sur l'échantillon de validation avec cet hyperparamètre : {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre  :\")\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\n\nprint(f\"\\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : {overall_test_accuracy:.2%}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](bayesien_naif_files/figure-pdf/cell-2-output-1.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n🔹 Meilleur var_smoothing sur l'échantillon de validation : 1.0e-07\nTaux de bien classés sur l'échantillon de validation avec cet hyperparamètre : 61.23%\n\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\n[[1300  475   12    0   57    9  266]\n [ 615 1732  101    1  222   89   73]\n [   0   72  939  151   72  196    0]\n [   0    0   33   66    0   11    0]\n [   2  179    4    0  176   19    0]\n [   0   66  271   34   12  311    0]\n [ 162    2    3    0    3    0  651]]\n\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre  :\nClasse 1 : 61.35%\nClasse 2 : 61.14%\nClasse 3 : 65.66%\nClasse 4 : 60.00%\nClasse 5 : 46.32%\nClasse 6 : 44.81%\nClasse 7 : 79.29%\n\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : 61.70%\n```\n:::\n:::\n\n\n",
    "supporting": [
      "bayesien_naif_files/figure-pdf"
    ],
    "filters": []
  }
}