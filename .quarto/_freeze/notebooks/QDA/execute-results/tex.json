{
  "hash": "06ae4ef05c1f90092c369ba92ab11cd6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Analyse Discriminante Quadratique (QDA) - Multiclasse\"\n---\n\n\n\n\n\n\n## Théorie\n\nL'**Analyse Discriminante Quadratique (QDA)** est une technique de classification qui, contrairement à LDA, permet aux classes d'avoir des **matrices de covariance différentes**. Cela le rend plus flexible mais peut aussi augmenter le risque de sur-apprentissage.\n\nContrairement à d'autres modèles initialement conçus pour des problèmes binaires et adaptés aux cas multiclasse via OVA ou OVO, **QDA est intrinsèquement multiclasse**. Il attribue directement une observation à l’une des classes disponibles en estimant des distributions normales multivariées et en utilisant la règle de Bayes.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **Régularisation (`reg_param`)** : contrôle la variance de la covariance estimée et est sélectionnée en fonction de la précision sur l'ensemble de validation.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur hyperparamètre.\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur `reg_param` et évaluation\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('../data/covertype_train.csv')\nval_data = pd.read_csv('../data/covertype_val.csv')\ntest_data = pd.read_csv('../data/covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1), train_data['Cover_Type']\nX_val, y_val = val_data.drop('Cover_Type', axis=1), val_data['Cover_Type']\nX_test, y_test = test_data.drop('Cover_Type', axis=1), test_data['Cover_Type']\n\n# 🔢 Normalisation des données\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# 🎯 Recherche du meilleur hyperparamètre reg_param\nreg_params = np.linspace(0, 1, 10)\nval_accuracies = []\n\nfor reg_param in reg_params:\n    qda = QuadraticDiscriminantAnalysis(reg_param=reg_param)\n    qda.fit(X_train, y_train)\n    acc = accuracy_score(y_val, qda.predict(X_val))\n    val_accuracies.append((reg_param, acc))\n\n# Sélection du meilleur hyperparamètre\nbest_reg_param, best_val_acc = max(val_accuracies, key=lambda x: x[1])\n\n# 📈 Affichage du graphique\nplt.figure(figsize=(8, 6))\nplt.plot(reg_params, [acc for reg_param, acc in val_accuracies], marker='o', linestyle='dashed', label=\"Validation\")\nplt.xlabel(\"Régularisation (reg_param)\")\nplt.ylabel(\"Précision sur validation\")\nplt.title(\"Impact de la régularisation sur la performance de QDA\")\nplt.legend()\nplt.show()\n\n# 🏆 Modèle final avec le meilleur hyperparamètre\nfinal_model = QuadraticDiscriminantAnalysis(reg_param=best_reg_param)\nfinal_model.fit(X_train, y_train)\ny_test_pred = final_model.predict(X_test)\n\n# 📊 Matrice de confusion\nconf_matrix = confusion_matrix(y_test, y_test_pred)\n\n# 📈 Calcul des taux de bien classés par classe\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\noverall_test_accuracy = accuracy_score(y_test, y_test_pred)\n\n# 📝 Affichage des résultats\nprint(f\"\\n🔹 Meilleur hyperparamètre reg_param sur l'échantillon de validation : {best_reg_param:.2f}\")\nprint(f\"Taux de bien classés sur l'échantillon de validation avec cet hyperparamètre : {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre :\")\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\n\nprint(f\"\\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : {overall_test_accuracy:.2%}\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/discriminant_analysis.py:1024: LinAlgWarning: The covariance matrix of class 0 is not full rank. Increasing the value of parameter `reg_param` might help reducing the collinearity.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/discriminant_analysis.py:1024: LinAlgWarning: The covariance matrix of class 1 is not full rank. Increasing the value of parameter `reg_param` might help reducing the collinearity.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/discriminant_analysis.py:1024: LinAlgWarning: The covariance matrix of class 2 is not full rank. Increasing the value of parameter `reg_param` might help reducing the collinearity.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/discriminant_analysis.py:1024: LinAlgWarning: The covariance matrix of class 3 is not full rank. Increasing the value of parameter `reg_param` might help reducing the collinearity.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/discriminant_analysis.py:1024: LinAlgWarning: The covariance matrix of class 4 is not full rank. Increasing the value of parameter `reg_param` might help reducing the collinearity.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/discriminant_analysis.py:1024: LinAlgWarning: The covariance matrix of class 5 is not full rank. Increasing the value of parameter `reg_param` might help reducing the collinearity.\n  warnings.warn(\n/home/ensai/.local/share/virtualenvs/postagram_ensai-i0XV5lHB/lib/python3.10/site-packages/sklearn/discriminant_analysis.py:1024: LinAlgWarning: The covariance matrix of class 6 is not full rank. Increasing the value of parameter `reg_param` might help reducing the collinearity.\n  warnings.warn(\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](QDA_files/figure-pdf/cell-2-output-2.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n🔹 Meilleur hyperparamètre reg_param sur l'échantillon de validation : 0.89\nTaux de bien classés sur l'échantillon de validation avec cet hyperparamètre : 58.73%\n\n📊 Matrice de confusion sur l'échantillon de test, avec le meilleur hyperparamètre :\n[[1163  626    1    1   89   14  225]\n [ 650 1561   51   27  402  125   17]\n [   0    7  948  136   50  289    0]\n [   0    0   45   53    0   12    0]\n [  28  103   27   19  191   12    0]\n [  11   34  230   53   31  335    0]\n [ 103   35    3    0   16    0  664]]\n\n📈 Taux de bien classés par classe sur l'échantillon de test, avec le meilleur hyperparamètre :\nClasse 1 : 54.88%\nClasse 2 : 55.10%\nClasse 3 : 66.29%\nClasse 4 : 48.18%\nClasse 5 : 50.26%\nClasse 6 : 48.27%\nClasse 7 : 80.88%\n\n🔹 Taux de bien classés sur l'échantillon de test avec le meilleur hyperparamètre : 58.60%\n```\n:::\n:::\n\n\n",
    "supporting": [
      "QDA_files/figure-pdf"
    ],
    "filters": []
  }
}