{
  "hash": "6d1492a1bd5fe1c61d0b581e291ce969",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Réseau de Neurones (MLP) avec sortie Softmax\"\n---\n\n\n\n\n\n\n## Théorie\n\nUn réseau de neurones multi-couches (**MLP - Multi-Layer Perceptron**) est un modèle d'apprentissage supervisé basé sur des couches de neurones artificiels. Il est particulièrement efficace pour la classification non linéaire.\n\nDans notre cas, nous utilisons **une couche de sortie Softmax**, qui permet de normaliser les sorties du réseau en probabilités pour une classification multiclasses.\n\n## Hyperparamètre utilisé\n\nNous allons optimiser :\n\n- **Nombre d'époques (`epochs`)** : sélectionné en fonction de la précision sur l'ensemble de validation.\n\nNous utilisons également :\n- **Optimiseur Adam** avec un taux d’apprentissage adaptatif.\n- **Taille du batch (`batch_size`)** fixé à 32.\n\n## Métriques d’évaluation\n\nNous afficherons :\n\n- **Matrice de confusion** : montrant les erreurs de classification sur l'échantillon de test.\n\n- **Taux de bien classés sur l'échantillon de validation** avec le meilleur nombre d'époques.\n\n- **Taux de bien classés sur l'échantillon de test** avec ce même hyperparamètre.\n\n- **Taux de bien classés par classe sur l'échantillon de test** pour observer la précision sur chaque classe.\n\n## Recherche du meilleur nombre d'époques et évaluation\n\n::: {#9d4a02ff .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.preprocessing import StandardScaler\nfrom torch.utils.data import TensorDataset, DataLoader\n\n# 🔇 Suppression des avertissements inutiles\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# 🔌 Utilisation du CPU uniquement (désactivation GPU)\ndevice = torch.device(\"cpu\")\ntorch.backends.cudnn.enabled = False\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n\n# 🔄 Chargement des ensembles de données\ntrain_data = pd.read_csv('covertype_train.csv')\nval_data = pd.read_csv('covertype_val.csv')\ntest_data = pd.read_csv('covertype_test.csv')\n\n# 📊 Préparation des données\nX_train, y_train = train_data.drop('Cover_Type', axis=1).values, train_data['Cover_Type'].values - 1\nX_val, y_val = val_data.drop('Cover_Type', axis=1).values, val_data['Cover_Type'].values - 1\nX_test, y_test = test_data.drop('Cover_Type', axis=1).values, test_data['Cover_Type'].values - 1\n\n# 🔢 Normalisation des données\nscaler = StandardScaler()\nX_train, X_val, X_test = scaler.fit_transform(X_train), scaler.transform(X_val), scaler.transform(X_test)\n\n# 📦 Conversion en tenseurs PyTorch\nX_train_torch = torch.tensor(X_train, dtype=torch.float32, device=device)\ny_train_torch = torch.tensor(y_train, dtype=torch.long, device=device)\nX_val_torch = torch.tensor(X_val, dtype=torch.float32, device=device)\ny_val_torch = torch.tensor(y_val, dtype=torch.long, device=device)\nX_test_torch = torch.tensor(X_test, dtype=torch.float32, device=device)\ny_test_torch = torch.tensor(y_test, dtype=torch.long, device=device)\n\n# 📚 Création des DataLoaders\nbatch_size = 32\ntrain_loader = DataLoader(TensorDataset(X_train_torch, y_train_torch), batch_size=batch_size, shuffle=True)\nval_loader = DataLoader(TensorDataset(X_val_torch, y_val_torch), batch_size=batch_size, shuffle=False)\ntest_loader = DataLoader(TensorDataset(X_test_torch, y_test_torch), batch_size=batch_size, shuffle=False)\n\n# 🏗 Définition du modèle PyTorch (MLP)\nclass MLP(nn.Module):\n    def __init__(self, input_dim, num_classes):\n        super(MLP, self).__init__()\n        self.fc1 = nn.Linear(input_dim, 128)\n        self.relu1 = nn.ReLU()\n        self.fc2 = nn.Linear(128, 64)\n        self.relu2 = nn.ReLU()\n        self.fc3 = nn.Linear(64, num_classes)\n\n    def forward(self, x):\n        x = self.relu1(self.fc1(x))\n        x = self.relu2(self.fc2(x))\n        return self.fc3(x)  # Pas de softmax ici (inclus dans CrossEntropyLoss)\n\n# 🎯 Initialisation du modèle\nnum_features, num_classes = X_train.shape[1], len(set(y_train))\nmodel = MLP(num_features, num_classes).to(device)\n\n# 🚀 Optimiseur et fonction de perte\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters())\n\n# 📈 Entraînement du modèle avec sélection du meilleur nombre d'époques\nnum_epochs = 100\ntrain_acc_list, val_acc_list = [], []\nbest_val_acc, best_epoch = 0, 0\n\nfor epoch in range(num_epochs):\n    # 🔄 Mode entraînement\n    model.train()\n    correct_train, total_train = 0, 0\n\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        outputs = model(X_batch)\n        loss = criterion(outputs, y_batch)\n        loss.backward()\n        optimizer.step()\n\n        # 🎯 Calcul de l'accuracy sur l'entraînement\n        _, predicted = torch.max(outputs, 1)\n        correct_train += (predicted == y_batch).sum().item()\n        total_train += y_batch.size(0)\n\n    train_acc_list.append(correct_train / total_train)\n\n    # 🔄 Mode validation\n    model.eval()\n    correct_val, total_val = 0, 0\n\n    with torch.no_grad():\n        for X_batch, y_batch in val_loader:\n            outputs = model(X_batch)\n            _, predicted = torch.max(outputs, 1)\n            correct_val += (predicted == y_batch).sum().item()\n            total_val += y_batch.size(0)\n\n    val_accuracy = correct_val / total_val\n    val_acc_list.append(val_accuracy)\n\n    # 🎯 Sauvegarde de la meilleure époque\n    if val_accuracy > best_val_acc:\n        best_val_acc, best_epoch = val_accuracy, epoch + 1\n\n# 📉 Affichage des courbes d'entraînement\nplt.figure(figsize=(8, 6))\nplt.plot(range(1, num_epochs + 1), train_acc_list, label='Train Accuracy')\nplt.plot(range(1, num_epochs + 1), val_acc_list, label='Validation Accuracy')\nplt.axvline(best_epoch, color='r', linestyle='--', label=f'Best Epoch: {best_epoch}')\nplt.xlabel(\"Époques\")\nplt.ylabel(\"Taux de bonnes prédictions\")\nplt.title(\"Optimisation du modèle de réseau de neurones (PyTorch)\")\nplt.legend()\nplt.show()\n\n# 🔄 Ré-entraîner le modèle avec le meilleur nombre d'époques\nmodel.train()\nfor epoch in range(best_epoch):\n    for X_batch, y_batch in train_loader:\n        optimizer.zero_grad()\n        outputs = model(X_batch)\n        loss = criterion(outputs, y_batch)\n        loss.backward()\n        optimizer.step()\n\n# 🎯 Évaluation sur l'ensemble de test\nmodel.eval()\ncorrect_test, total_test = 0, 0\ny_test_pred_classes = []\n\nwith torch.no_grad():\n    for X_batch, y_batch in test_loader:\n        outputs = model(X_batch)\n        _, predicted = torch.max(outputs, 1)\n        y_test_pred_classes.extend(predicted.cpu().numpy())\n        correct_test += (predicted == y_batch).sum().item()\n        total_test += y_batch.size(0)\n\ntest_accuracy = correct_test / total_test\n\n# 📌 Affichage de la matrice de confusion et des métriques finales\nconf_matrix = confusion_matrix(y_test, y_test_pred_classes)\nprint(f\"\\n🔹 Meilleure époque : {best_epoch} avec une précision de validation de {best_val_acc:.2%}\")\nprint(\"\\n📊 Matrice de confusion :\")\nprint(conf_matrix)\n\nprint(\"\\n📈 Taux de bien classés par classe :\")\nclass_accuracies = conf_matrix.diagonal() / conf_matrix.sum(axis=1)\nfor i, acc in enumerate(class_accuracies, start=1):\n    print(f\"Classe {i} : {acc:.2%}\")\nprint(f\"\\nTaux de bien classés total : {test_accuracy:.2%}\")\n```\n\n::: {.cell-output .cell-output-display}\n![](reseau_neurones_files/figure-html/cell-2-output-1.png){width=673 height=527}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n🔹 Meilleure époque : 99 avec une précision de validation de 84.40%\n\n📊 Matrice de confusion :\n[[1804  247    0    0    6    1   61]\n [ 429 2296   20    1   42   35   10]\n [   0   30 1265   15    6  114    0]\n [   0    0   31   71    0    8    0]\n [   4   76    4    0  292    4    0]\n [   2   16   90    6    0  580    0]\n [  28    5    0    0    0    0  788]]\n\n📈 Taux de bien classés par classe :\nClasse 1 : 85.13%\nClasse 2 : 81.04%\nClasse 3 : 88.46%\nClasse 4 : 64.55%\nClasse 5 : 76.84%\nClasse 6 : 83.57%\nClasse 7 : 95.98%\n\nTaux de bien classés total : 84.61%\n```\n:::\n:::\n\n\n",
    "supporting": [
      "reseau_neurones_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}